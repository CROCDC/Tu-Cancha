package apps.tucancha.View.Activitysimport android.os.Buildimport android.support.v7.app.AppCompatActivityimport android.os.Bundleimport android.support.annotation.RequiresApiimport android.support.design.widget.Snackbarimport android.view.LayoutInflaterimport android.view.Viewimport android.widget.TextViewimport apps.tucancha.Controller.ControllerRenderimport apps.tucancha.Model.Jugadorimport apps.tucancha.Model.ListadoDeJugadoresimport apps.tucancha.Rimport apps.tucancha.Utils.DemoUtilsimport apps.tucancha.Utils.ResultListenerimport com.bumptech.glide.Glideimport com.google.ar.core.Frameimport com.google.ar.core.Planeimport com.google.ar.core.TrackingStateimport com.google.ar.sceneform.AnchorNodeimport com.google.ar.sceneform.math.Vector3import com.google.ar.sceneform.rendering.ViewRenderableimport com.google.ar.sceneform.ux.ArFragmentimport com.google.ar.sceneform.ux.TransformableNodeimport de.hdodenhof.circleimageview.CircleImageViewimport java.util.concurrent.CompletableFutureclass ArActivity : AppCompatActivity() {    private var isAddedItems = false    private lateinit var listadoDeJugadores: ListadoDeJugadores    private lateinit var arFragment: ArFragment    private lateinit var controllerRender: ControllerRender    companion object {        @JvmStatic        val ListaDeJugadores = "lista"    }    @RequiresApi(Build.VERSION_CODES.N)    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_ar)        DemoUtils.requestCameraPermission(this, 0x123)        controllerRender = ControllerRender()        intent.extras?.let {            listadoDeJugadores = it.getSerializable(ArActivity.ListaDeJugadores) as ListadoDeJugadores        }        arFragment = supportFragmentManager.findFragmentById(R.id.fmt_activityar) as ArFragment        controllerRender.completeAllFuture(createAllView(listadoDeJugadores), ResultListener<List<ViewRenderable>> { resultado ->            arFragment.arSceneView                    .scene                    .addOnUpdateListener { frameTime ->                        val frame = arFragment.arSceneView.arFrame                        for (plane in frame.getUpdatedTrackables(Plane::class.java)) {                            if (plane.trackingState == TrackingState.TRACKING) {                                if (!isAddedItems) {                                    var int= 0                                    resultado.forEach {                                        addItem(it,int)                                        int +=1                                    }                                    isAddedItems = true                                }                            }                        }                    }        })    }    public fun addItem(viewRenderable: ViewRenderable,i:Int) {        val jugador = listadoDeJugadores.listaDeJugadores.get(i)        val frame = arFragment.arSceneView.arFrame        viewRenderable.isShadowCaster = false        viewRenderable.isShadowReceiver = false        viewRenderable.material        if (frame.getCamera().getTrackingState() == TrackingState.TRACKING) {            frame.hitTest(frame.screenCenter().x, frame.screenCenter().y).forEach { hit ->                val trackable = hit.getTrackable()                if (trackable is Plane && (trackable as Plane).isPoseInPolygon(hit.getHitPose())) {                    val anchor = hit.createAnchor()                    val anchorNode = AnchorNode(anchor)                    anchorNode.setParent(arFragment.arSceneView.scene.camera)                    val transformableNode = TransformableNode(arFragment.transformationSystem)                    transformableNode.setParent(anchorNode)                    transformableNode.renderable = viewRenderable                    //transformableNode.localPosition = Vector3(10F,10F, -1f)                }            }        }    }    @RequiresApi(Build.VERSION_CODES.N)    public fun createView(jugador: Jugador): CompletableFuture<ViewRenderable> {        val circleImageView: CircleImageView        val txtNombre: TextView        val layoutInflater: LayoutInflater = LayoutInflater.from(this)        val view: View = layoutInflater.inflate(R.layout.fragment_jugador, null)        circleImageView = view.findViewById(R.id.circleImageViewJugador_fragmentjugador)        txtNombre = view.findViewById(R.id.textViewNombreDelJugador_fragmentjugador)        txtNombre.text = jugador.nombre        Glide.with(baseContext)                .load(jugador.urlFoto)                .into(circleImageView)        return ViewRenderable.builder().setView(this, view).build()    }    @RequiresApi(Build.VERSION_CODES.N)    public fun createAllView(listadoDeJugadores: ListadoDeJugadores): MutableList<CompletableFuture<ViewRenderable>> {        val list = mutableListOf<CompletableFuture<ViewRenderable>>()        for (jugador in listadoDeJugadores.listaDeJugadores) {            jugador.let {                list.add(createView(jugador))            }        }        return list    }    private fun Frame.screenCenter(): Vector3 {        val vF = findViewById<View>(android.R.id.content)        return Vector3(vF.width / 2f, vF.height / 2f, 0f)    }}